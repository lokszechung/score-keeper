// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(cuid())
  // username  String   @unique
  firstName            String
  lastName             String
  email                String       @unique
  password             String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  organisedTournaments Tournament[]
  createdTeams         Team[]
  createdPlayers       Player[]
}

model Tournament {
  id             String    @id @default(cuid())
  name           String
  startDateTime  DateTime
  description    String? // Intended to store HTML content
  format         Format
  pitches        Int?
  matchLength    Int?
  intervalLength Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organiserId    String
  organiser      User      @relation(fields: [organiserId], references: [id], onDelete: Cascade)
  teams          Team[]
  fixtures       Fixture[]
}

model Team {
  id           String     @id @default(cuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  addedById    String?
  addedBy      User?      @relation(fields: [addedById], references: [id])
  players      Player[]
  homeFixtures Fixture[]  @relation("HomeTeam")
  awayFixtures Fixture[]  @relation("AwayTeam")

  @@unique([name, tournamentId])
}

model Player {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addedById String?
  addedBy   User?   @relation(fields: [addedById], references: [id])

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Fixture {
  id              String          @id @default(cuid())
  kickOff         DateTime?
  matchLength     Int?
  status          Status
  tournamentStage TournamentStage
  stageInfo       Json
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  tournamentId    String
  tournament      Tournament      @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  homeTeamId      String
  homeTeam        Team            @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  awayTeamId      String
  awayTeam        Team            @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  // winnerId     String?
  // winner       Team?      @relation("Winner", fields: [winnerId], references: [id])
}

enum Format {
  ROUND_ROBIN
  KNOCK_OUT
  LEAGUE
  GROUP_KNOCK_OUT
}

enum Status {
  PREMATCH
  IN_PROGRESS
  FINISHED
  CANCELLED
  POSTPONED
}

enum TournamentStage {
  LEAGUE
  GROUP
  KNOCK_OUT
  QUARTER_FINAL
  SEMI_FINAL
  FINAL
}
